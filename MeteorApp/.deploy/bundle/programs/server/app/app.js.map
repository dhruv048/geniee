{"version":3,"sources":["meteor://ðŸ’»app/lib/collections/categories.js","meteor://ðŸ’»app/lib/collections/details.js","meteor://ðŸ’»app/lib/collections/index.js","meteor://ðŸ’»app/server/methods/categories.js","meteor://ðŸ’»app/server/methods/users.js","meteor://ðŸ’»app/server/publications/details.js","meteor://ðŸ’»app/server/publications/index.js","meteor://ðŸ’»app/server/seeds.js","meteor://ðŸ’»app/server/main.js"],"names":["Mongo","module","watch","require","v","Category","Collection","Details","exportDefault","Meteor","methods","categoryInfo","console","log","insert","title","name","contact","createdAt","Date","e","message","category","user","profile","role","update","_id","$set","err","Error","id","remove","userInfo","Accounts","createUser","password","username","email","users","findOne","res","result","_checkPassword","error","publish","find","seed","count","i","startup","settings","private","defaultAccount"],"mappings":";;;;;;;;AAAA,IAAIA,cAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACH,OAAD,YAAOI,CAAP,EAAS;AAACJ,YAAMI,CAAN;AAAQ;AAAlB,CAArC,EAAyD,CAAzD;AAETC,WAAW,IAAIL,MAAMM,UAAV,CAAqB,UAArB,CAAX,kD;;;;;;;;;;;ACFD,IAAIN,cAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACH,OAAD,YAAOI,CAAP,EAAS;AAACJ,YAAMI,CAAN;AAAQ;AAAlB,CAArC,EAAyD,CAAzD;AAEV,IAAMG,UAAU,IAAIP,MAAMM,UAAV,CAAqB,SAArB,CAAhB;AAFAL,OAAOO,aAAP,CAIeD,OAJf,iE;;;;;;;;;;;ACAA,IAAIA,gBAAJ;AAAYN,OAAOC,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAAA,uBAASC,CAAT,EAAW;AAACG,cAAQH,CAAR;AAAU;AAAtB,CAAlC,EAA0D,CAA1D;AAAZH,OAAOO,aAAP,CAGe;AACbD;AADa,CAHf,4F;;;;;;;;;;;ACAA,IAAIE,eAAJ;AAAWR,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACM,UAAD,YAAQL,CAAR,EAAU;AAACK,iBAAOL,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAIXK,OAAOC,OAAP,CAAe;AAEX,sBAAkB,UAACC,YAAD,EAAkB;AAChCC,gBAAQC,GAAR,CAAY,uBAAZ;;AACA,YAAI;AACAR,qBAASS,MAAT,CAAgB;AACZC,uBAAOJ,aAAaI,KADR;AAEZC,sBAAML,aAAaK,IAFP;AAGZC,yBAASN,aAAaM,OAHV;AAIZC,2BAAW,IAAIC,IAAJ;AAJC,aAAhB;AAMH,SAPD,CAQA,OAAOC,CAAP,EAAU;AACNR,oBAAQC,GAAR,CAAYO,EAAEC,OAAd;AAEH;AACJ,KAhBU;AAkBX,sBAAkB,UAAUC,QAAV,EAAoB;AAClC,YAAIb,OAAOc,IAAP,GAAcC,OAAd,CAAsBC,IAAtB,KAA+B,CAAnC,EAAsC;AAClC,gBAAI;AAEApB,yBAASqB,MAAT,CAAgB;AAACC,yBAAKL,SAASK;AAAf,iBAAhB,EAAqC;AACjCC,0BAAM;AACFb,+BAAOO,SAASP,KADd;AAEFC,8BAAMM,SAASN,IAFb;AAGFC,iCAASK,SAASL;AAHhB;AAD2B,iBAArC;AAOH,aATD,CAUA,OAAOY,GAAP,EAAY;AACRjB,wBAAQC,GAAR,CAAYgB,IAAIR,OAAhB;AACH;AAEJ,SAfD,MAgBK;AACD,kBAAM,IAAIZ,OAAOqB,KAAX,CAAiB,GAAjB,EAAsB,EAAtB,EAA0B,0BAA1B,CAAN;AACH;AACJ,KAtCU;AAwCX,sBAAkB,UAAUC,EAAV,EAAc;AAC5B,YAAItB,OAAOc,IAAP,GAAcC,OAAd,CAAsBC,IAAtB,KAA8B,CAAlC,EAAqC;AACjC,gBAAI;AACApB,yBAAS2B,MAAT,CAAgB;AAACL,yBAAII;AAAL,iBAAhB;AACH,aAFD,CAGA,OAAOF,GAAP,EAAY;AACRjB,wBAAQC,GAAR,CAAYgB,IAAIR,OAAhB;AACH;AACJ,SAPD,MAQK;AACD,kBAAM,IAAIZ,OAAOqB,KAAX,CAAiB,GAAjB,EAAqB,EAArB,EAAyB,0BAAzB,CAAN;AACH;AACJ;AApDU,CAAf,4F;;;;;;;;;;;ACJA,IAAIrB,eAAJ;AAAWR,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACM,UAAD,YAAQL,CAAR,EAAU;AAACK,iBAAOL,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAEXK,OAAOC,OAAP,CAAe;AAEX,oBAAiB,UAACuB,QAAD,EAAa;AAC1BrB,gBAAQC,GAAR,CAAY,iBAAZ;;AACA,YAAI;AACAqB,qBAASC,UAAT,CAAoB;AAChBC,0BAAUH,SAASG,QADH;AAEhBC,0BAAUJ,SAAShB,OAFH;AAGhBqB,uBAAOL,SAASK,KAHA;AAIhBpB,2BAAW,IAAIC,IAAJ,EAJK;AAKhBK,yBAAS;AACLC,0BAAMQ,SAASR,IADV;AAEL;AACAT,0BAAMiB,SAASjB;AAHV;AALO,aAApB;AAWH,SAZD,CAaA,OAAOI,CAAP,EAAU;AACNR,oBAAQC,GAAR,CAAYO,EAAEC,OAAd;AAEH;AACJ,KArBU;AAuBX,iBAAY,UAACgB,QAAD,EAAUD,QAAV,EAAsB;AAC9B;AACA;AACA;AACA;AACA,YAAI;AACA,gBAAIb,OAAO,IAAX;AACAd,mBAAO8B,KAAP,CAAaC,OAAb,CAAqB;AACjB,kCAAkBH;AADD,aAArB,EAEG,UAAUR,GAAV,EAAeY,GAAf,EAAoB;AACnB,oBAAI,CAACZ,GAAL,EAAU;AACNN,2BAAOkB,GAAP;AACH;AAEJ,aAPD;;AAQA,gBAAIlB,SAAS,IAAb,EAAmB;AACfA,uBAAOd,OAAO8B,KAAP,CAAaC,OAAb,CAAqB;AACxB,gCAAYH;AADY,iBAArB,CAAP;AAGH,aAdD,CAgBA;;;AACA,gBAAId,IAAJ,EAAU;AACN;AACA,oBAAImB,SAASR,SAASS,cAAT,CAAwBpB,IAAxB,EAA8Ba,QAA9B,CAAb;;AACA,oBAAIM,OAAOE,KAAX,EAAkB;AACd,2BAAOF,OAAOE,KAAd;AACH,iBAFD,MAEO;AACH,2BAAOF,MAAP;AACH;AACJ,aARD,MAQO;AACH;AACA,uBAAO;AACHE,2BAAO;AADJ,iBAAP;AAGH;AACJ,SA/BD,CAgCA,OAAOxB,CAAP,EAAU;AACNR,oBAAQC,GAAR,CAAYO,EAAEC,OAAd;AACH;AACJ;AA/DU,CAAf,4F;;;;;;;;;;;ACFA,IAAIZ,eAAJ;AAAWR,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACM,UAAD,YAAQL,CAAR,EAAU;AAACK,iBAAOL,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AACX;AAGA;AACA;AACA;AACA;AACA;AAEIK,OAAOoC,OAAP,CAAe,iBAAf,EAAkC,YAAM;AACpC,WAAOxC,SAASyC,IAAT,EAAP;AACH,CAFD,6F;;;;;;;;;;;ACVJ;AACA;AACA;AACA;AACA,6F;;;;;;;;;;;ACJA,IAAIvC,gBAAJ;AAAYN,OAAOC,KAAP,CAAaC,QAAQ,0BAAR,CAAb,EAAiD;AAAA,uBAASC,CAAT,EAAW;AAACG,cAAQH,CAAR;AAAU;AAAtB,CAAjD,EAAyE,CAAzE;;AAEZ,IAAM2C,OAAO,YAAM;AACjB,MAAIxC,QAAQuC,IAAR,GAAeE,KAAf,OAA2B,CAA/B,EAAkC;AAChC,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AAC3B1C,cAAQO,MAAR,CAAe;AACbE,2BAAiBiC;AADJ,OAAf;AAGD;AACF;AACF,CARD;;AAFAhD,OAAOO,aAAP,CAYeuC,IAZf,oE;;;;;;;;;;;ACAA,IAAItC,eAAJ;AAAWR,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACM,UAAD,YAAQL,CAAR,EAAU;AAACK,iBAAOL,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAI8B,iBAAJ;AAAajC,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAAC+B,YAAD,YAAU9B,CAAV,EAAY;AAAC8B,mBAAS9B,CAAT;AAAW;AAAxB,CAA7C,EAAuE,CAAvE;AAEvFK,OAAOyC,OAAP,CAAe,YAAY;AAEvB;AACA,QAAIzC,OAAO8B,KAAP,CAAaO,IAAb,GAAoBE,KAApB,OAAgC,CAApC,EAAuC;AACnC,YAAI,CAAC,CAACvC,OAAO0C,QAAP,CAAgBC,OAAhB,CAAwBC,cAA9B,EAA8C;AAC1CnB,qBAASC,UAAT,CAAoB;AAChBC,0BAAU3B,OAAO0C,QAAP,CAAgBC,OAAhB,CAAwBC,cAAxB,CAAuCjB,QADjC;AAEhBC,0BAAU5B,OAAO0C,QAAP,CAAgBC,OAAhB,CAAwBC,cAAxB,CAAuChB,QAFjC;AAGhBC,uBAAO7B,OAAO0C,QAAP,CAAgBC,OAAhB,CAAwBC,cAAxB,CAAuCf,KAH9B;AAIhBpB,2BAAW,IAAIC,IAAJ,EAJK;AAKhBK,yBAAS;AACLC,0BAAM,CADD;AAELT,0BAAM,OAFD;AAGLD,2BAAO;AAHF;AALO,aAApB;AAWH,SAZD,MAYO;AACHH,oBAAQC,GAAR,CAAY,8DAAZ;AACH;AACJ;;AACD;AACH,CArBD,6F","file":"/app.js","sourcesContent":["import {Mongo} from 'meteor/mongo';\n\n Category = new Mongo.Collection('category');\n\n","import {Mongo} from 'meteor/mongo';\n\nconst Details = new Mongo.Collection('details');\n\nexport default Details;\n","import Details from './details';\n\n\nexport default {\n  Details\n};\n\n","import { Meteor } from 'meteor/meteor';\n\n\n\nMeteor.methods({\n\n    'addNewCategory': (categoryInfo) => {\n        console.log('addNewCategory:::=>>>');\n        try {\n            Category.insert({\n                title: categoryInfo.title,\n                name: categoryInfo.name,\n                contact: categoryInfo.contact,\n                createdAt: new Date(),\n            });\n        }\n        catch (e) {\n            console.log(e.message);\n\n        }\n    },\n\n    'updateCategory': function (category) {\n        if (Meteor.user().profile.role === 1) {\n            try {\n\n                Category.update({_id: category._id}, {\n                    $set: {\n                        title: category.title,\n                        name: category.name,\n                        contact: category.contact,\n                    }\n                });\n            }\n            catch (err) {\n                console.log(err.message);\n            }\n\n        }\n        else {\n            throw new Meteor.Error(401, \"\", \"Logged User is not Admin\");\n        }\n    },\n\n    'removeCategory': function (id) {\n        if (Meteor.user().profile.role ===1) {\n            try {\n                Category.remove({_id:id});\n            }\n            catch (err) {\n                console.log(err.message);\n            }\n        }\n        else {\n            throw new Meteor.Error(401,\"\", \"Logged User is not Admin\");\n        }\n    }\n})","import { Meteor } from 'meteor/meteor';\n\nMeteor.methods({\n\n    'registerUser':  (userInfo)=> {\n        console.log('register:::=>>>');\n        try {\n            Accounts.createUser({\n                password: userInfo.password,\n                username: userInfo.contact,\n                email: userInfo.email,\n                createdAt: new Date(),\n                profile: {\n                    role: userInfo.role,\n                    // profileimage: null,\n                    name: userInfo.name\n                }\n            });\n        }\n        catch (e) {\n            console.log(e.message);\n\n        }\n    },\n\n    'loginUser':(username,password)=> {\n        // Meteor.loginWithPassword({email: username}, password, function(error) {\n        //     console.log(error)\n        // });\n        //find user if exist from paramter email\n        try {\n            var user = null;\n            Meteor.users.findOne({\n                'emails.address': username\n            }, function (err, res) {\n                if (!err) {\n                    user = res;\n                }\n\n            });\n            if (user === null) {\n                user = Meteor.users.findOne({\n                    'username': username\n                });\n            }\n\n            //if user is found\n            if (user) {\n                //authenticate user\n                var result = Accounts._checkPassword(user, password);\n                if (result.error) {\n                    return result.error;\n                } else {\n                    return result;\n                }\n            } else {\n                //if user is not found\n                return {\n                    error: \"user not found\"\n                }\n            }\n        }\n        catch (e) {\n            console.log(e.message)\n        }\n    }\n});\n\n\n\n\n\n","import { Meteor } from 'meteor/meteor';\n// import { Details } from '/lib/collections';\n\n\n// export default () => {\n//   Meteor.publish('details-list', () => {\n//     return Details.find();\n//   });\n// }\n\n    Meteor.publish('categories-list', () => {\n        return Category.find();\n    });\n\n","// import details from './details';\n//\n// export default function (){\n//   details();\n// }\n","import Details from '/lib/collections/details';\n\nconst seed = () => {\n  if (Details.find().count() === 0) {\n    for (let i = 0; i < 10; i++) {\n      Details.insert({\n        name: `Detail #${i}`\n      });\n    }\n  }\n}\n\nexport default seed;\n","import {Meteor} from \"meteor/meteor\";\nimport {Accounts} from \"meteor/accounts-base\";\nMeteor.startup(function () {\n\n    // chck if there is Super Admin, If not create one.\n    if (Meteor.users.find().count() === 0) {\n        if (!!Meteor.settings.private.defaultAccount) {\n            Accounts.createUser({\n                password: Meteor.settings.private.defaultAccount.password,\n                username: Meteor.settings.private.defaultAccount.username,\n                email: Meteor.settings.private.defaultAccount.email,\n                createdAt: new Date(),\n                profile: {\n                    role: 1,\n                    name: \"Admin\",\n                    title: \"Super Admin\",\n                }\n            });\n        } else {\n            console.log('No default user!  Please invoke meteor with a settings file.');\n        }\n    }\n    ;\n});\n"]}